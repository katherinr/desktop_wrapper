// Ёлемент дл€ задани€ ограничени€ скорости изменени€ сигнала (Rate Limiter)
// fsr - falling slew rate - максимальна€ скорость падени€ выходного сигнала 
// rsr - rising slew rate  - максимальна€ скорость нарастани€ выходного сигнала 

#ifndef rate_limiter_h
#define rate_limiter_h

#include <math.h>

class Cratelimiter{
private:                                                                    // переменные состо€ни€
    double y_k_1;
public:                                                                     // параметры
    double dt;
    double y_k;                                                             // выходной сигнал
public:

    Cratelimiter() : y_k_1(0), dt(0.01), y_k(0)
	{ // конструктор класса вызываетс€ при создании объекта            
    }

    ~Cratelimiter() { // деструктор класса вызываетс€ при уничтожении объекта
    } 
            
//-------------------------------------------------------------------------
// «адание параметров
    
    void Initialize(double in_dt, double in_ic  );  

//-------------------------------------------------------------------------
// ¬ывод текущего значени€
    
    double Output();
    
//-------------------------------------------------------------------------    
// ¬ывод текущего значени€ и выполнение нового шага вычислений
    
    double Update(double fsr, double rsr, double u);
    
//-------------------------------------------------------------------------    
// «авершение вычислений
    
    void Terminate();
    
};

#endif
